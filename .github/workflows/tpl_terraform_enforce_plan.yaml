on:
  workflow_call:
    inputs:
      terraform-version:
        required: false
        type: string
        default: "1.4.5"
        description: >
          Terraform version to use.
      terraform-path:
        required: true
        type: string
        description: >
          Repository relative path to terraform code without leading and tailing "/".
      environment:
        required: true
        type: string
        description: >
          GitHub environment name. Requires GitHub Pro, Team or Enterprise.

jobs:
  terraform-plan:
    name: Planning
    if: github.event.pull_request.merged != true && github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
      pull-requests: write
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        working-directory: ${{ inputs.terraform-path }}
        shell: bash
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        working-directory: ${{ inputs.terraform-path }}
        shell: bash
        run: terraform init

      - name: Terraform Validate
        id: validate
        working-directory: ${{ inputs.terraform-path }}
        shell: bash
        run: terraform validate -no-color

      # Generates an execution plan for Terraform
      #
      # Known limitations:
      # This step can fail due to a locked tfstate file.
      # This especially occurs on push on open PR branches and a pipeline gets triggered for push and pr event.
      # unfortunately terraform has no retry logic to handle locked tfstates and will fail.
      # Issue: https://github.com/hashicorp/terraform/issues/21829
      - name: Terraform Plan
        id: plan
        working-directory: ${{ inputs.terraform-path }}
        shell: bash
        run: |
          echo 'plan<<EOF' >> $GITHUB_OUTPUT
          terraform plan -no-color -out ${{ runner.temp }}/terraform.plan >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Save Artifact
        id: save-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.environment }}-terraform.tfplan
          path: ${{ runner.temp }}/terraform.plan

      # If this is a PR post the changes
      - name: Comment PR with planned changes
        uses: thollander/actions-comment-pull-request@v2
        if: github.ref != 'refs/heads/main'
        continue-on-error: true
        with:
          message: |
            ## Changes to: ${{ inputs.environment }}
            #### Terraform Format and Style üñå`${{ steps.fmt.outcome }}`
            #### Terraform Initialization ‚öôÔ∏è`${{ steps.init.outcome }}`
            #### Terraform Validation ü§ñ`${{ steps.validate.outcome }}`
            #### Terraform Plan üìñ`${{ steps.plan.outcome }}`

            <details><summary>Show Plan</summary>

            ```bash
            ${{ steps.plan.outputs.plan }}
            ```

            </details>

            *Pusher: @${{ github.actor }}, Action: `${{ github.event_name }}`*
          comment_tag: ${{ inputs.environment }}

  terraform-apply:
    name: Deployment
    # if: github.event.review.state == 'approved' && github.ref == 'refs/heads/main'
    if: github.event.pull_request.merged == true
    # See: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-pull_request-workflow-when-a-pull-request-merges
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
      pull-requests: write
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
    steps:
      - uses: actions/checkout@v4

      - name: Get PR ID
        id: pr-id
        run: |
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo $PR_NUMBER
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        working-directory: ${{ inputs.terraform-path }}
        shell: bash
        run: terraform init

      - name: Download Plan
        id: download-plan
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.REPO_SCOPED_TOKEN }} #! This has to be a repo scoped personal access token
          ## Requires workflow file name to be like terraform folder name.
          # Example:
          # terraform folder: dev
          # workflow file: terraform-dev.yaml
          workflow: terraform-${{ inputs.terraform-path }}.yaml
          pr: ${{ steps.pr-id.outputs.PR_NUMBER }} # This is 'main' on pushes on main
          name: ${{ inputs.environment }}-terraform.tfplan
          path: ${{ runner.temp }}

      - name: Terraform Apply
        id: apply
        working-directory: ${{ inputs.terraform-path }}
        shell: bash
        run: |
          echo 'apply<<EOF' >> $GITHUB_OUTPUT
          terraform apply -input=false -no-color ${{ runner.temp }}/terraform.plan >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      # If this is a PR post the changes
      - name: Comment PR with planned changes
        uses: thollander/actions-comment-pull-request@v2
        continue-on-error: true
        with:
          pr_number: ${{ steps.pr-id.outputs.PR_NUMBER }}
          message: |
            ## Deployment to: ${{ inputs.environment }}
            #### Terraform Deployment üöÄ`${{ steps.apply.outcome }}`

            <details><summary>Show Plan</summary>

            ```bash
            ${{ steps.apply.outputs.apply }}
            ```

            </details>
